"use client";

import { useState, useEffect } from "react";
import { toast } from "sonner";
import {
  getAnalyse,
  fileScanAnalyse,
  urlScanAnalyse,
} from "@/utils/virusTotal.action";
import { scheduleTask, cancelAllSchedules } from "@/utils/scheduler";
import { Button } from "@/components/ui/button";
import { Upload, X } from "lucide-react";
import { IoSearch } from "react-icons/io5";
import { FaEdit } from "react-icons/fa";
import { RiLoaderLine } from "react-icons/ri";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import ReactCountUp from "@/components/ui/countUp";
import { AnimatedCounter } from "@/components/ui/animatedCount";

const MalwareScan = () => {
  const [file, setFile] = useState(null);
  const [scanResult, setScanResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [urlInput, setUrlInput] = useState("");
  const [isUrlScanning, setIsUrlScanning] = useState(false);
  const [scanType, setScanType] = useState(null); // 'url-scan' or 'file-scan'

  const handleButtonClick = async () => {
    try {
      setScanType("file-scan");
      if (urlInput) setUrlInput("");
      const [fileHandle] = await window.showOpenFilePicker({
        multiple: false,
      });
      const selectedFile = await fileHandle.getFile();
      setFile(selectedFile);

      setIsLoading(true);
      const fileForm = new FormData();
      fileForm.append("file", selectedFile);

      const startScanning = async (file) => {
        try {
          const result = await fileScanAnalyse(file);
          // console.log(result);

          if (!result) {
            throw new Error("Something went wrong, please try again!");
          }
          setScanResult(result);
          return "Your Scan analysis is ready!";
        } catch (error) {
          throw error;
        } finally {
          setIsLoading(false);
        }
      };

      toast.promise(startScanning(fileForm), {
        loading: "Scanning...",
        success: "Your Scan analysis is ready!",
        error: (err) => `${err.message}`,
      });
    } catch (err) {
      if (err.name !== "AbortError") {
        toast.error("Failed to select file");
      }
    }
  };

  const handleRemoveFile = () => {
    setFile(null);
    setScanResult(null);
  };

  const handleUrlSubmit = async (e) => {
    e.preventDefault();
    setScanType("url-scan");
    if (!urlInput.trim()) {
      toast.error("Please enter a URL");
      return;
    }

    setIsUrlScanning(true);

    const startUrlScanning = async () => {
      try {
        const result = await urlScanAnalyse(urlInput);
        if (!result) {
          throw new Error("Something went wrong, please try again!");
        }
        setScanResult(result);
        return "URL analysis is ready!";
      } catch (error) {
        throw error;
      } finally {
        setIsUrlScanning(false);
      }
    };

    toast.promise(startUrlScanning(), {
      loading: "Analyzing URL...",
      success: "URL analysis is ready!",
      error: (err) => `${err.message}`,
    });
  };

  return (
    <>
      <section className="w-full h-full space-y-4 md:space-y-6 lg:space-y-8 overflow-hidden">
        <TopSection scanResult={scanResult}>
          <div className="w-full h-fit space-y-2 md:sapce-y-4 lg:space-y-6 relative overflow-hidde">
            {file && (
              <div className="w-full animate-slide-down p-2 bg-blue-500/10 rounded-md flex-between">
                <p className="text-sm text-blue-600 dark:text-blue-400 truncate">
                  Selected file: {file.name}
                </p>
                <button
                  onClick={handleRemoveFile}
                  className="p-1 hover:bg-red-500/10 rounded-full text-red-500 transition-colors"
                >
                  <X size={18} />
                </button>
              </div>
            )}

            <Button
              size="lg"
              effect="shine"
              className="w-full"
              onClick={handleButtonClick}
              disabled={isLoading}
            >
              <Upload className="w-8 h-8" />
              <span className="text-sm">
                {isLoading ? "Uploading file..." : "Upload File"}
              </span>
            </Button>

            <form
              onSubmit={handleUrlSubmit}
              className="w-full h-fit space-y-1 md:sapce-y-2 lg:space-y-4"
            >
              <input
                type="text"
                name="string"
                id="string"
                required
                value={urlInput}
                onChange={(e) => setUrlInput(e.target.value)}
                placeholder="Enter URL, Domain, IP or Hash"
                className="input-style"
              />
              <Button
                size="lg"
                effect="gooeyLeft"
                className="w-full"
                type="submit"
                disabled={isUrlScanning}
              >
                <IoSearch size={28} />
                <span className="text-sm">
                  {isUrlScanning ? "Analysing..." : "Search"}
                </span>
              </Button>
            </form>
          </div>
        </TopSection>
        <MiddleSection scanResult={scanResult} setScanResult={setScanResult} />
        <BottomSection />
      </section>
    </>
  );
};

export default MalwareScan;

const TopSection = ({ children, scanResult }) => {
  const [elapsedTime, setElapsedTime] = useState("");

  const resultsCount =
    scanResult?.attributes?.results ?
      Object.keys(scanResult.attributes.results).length
    : 0;

  useEffect(() => {
    if (!scanResult?.attributes?.date) return;

    const updateElapsedTime = () => {
      const scanDate = scanResult.attributes.date * 1000;
      const now = Date.now();
      const diff = now - scanDate;

      const minutes = Math.floor(diff / 60000);
      const seconds = Math.floor((diff % 60000) / 1000);

      setElapsedTime(`${minutes}m ${seconds}s`);
    };

    updateElapsedTime();

    const intervalId = setInterval(updateElapsedTime, 1000);

    return () => clearInterval(intervalId);
  }, [scanResult?.attributes?.date]);

  return (
    <>
      <div className="w-full h-fit animate-slide-down grid md:grid-cols-2 gap-2 md:gap-4 lg:gap-6 xl:gap-8">
        <div className="w-full h-full bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:sapce-y-6 lg:space-y-8 rounded-lg overflow-hidden">
          <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
            File Analysis
          </h3>

          {children}
        </div>
        <div
          id="detection-statistics"
          className="w-full h-full bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:sapce-y-6 lg:space-y-8  rounded-lg overflow-hidden"
        >
          <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
            Detection Statistics
          </h3>
          <div className="space-y-1 sm:sapce-y-2 md:space-y-3 lg:space-y-4">
            <div className="w-full flex-between gap-2">
              <span>Total Scans:</span>
              <AnimatedCounter
                value={resultsCount}
                className="text-blue-600 dark:text-blue-500"
              />
            </div>
            {/* <div className="w-full flex-between gap-2">
              <span>Detection Rate:</span>
              <span className="text-red-600 dark:text-red-500">3</span>
            </div> */}
            <div className="w-full flex-between gap-2">
              <span>Analysis Date:</span>
              <span>{elapsedTime || "-"}</span>
            </div>
          </div>
        </div>

        {/* <div
          id="scan-options"
          className="w-full h-full bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-2 md:sapce-y-4 lg:space-y-6 rounded-lg overflow-hidden"
        >
          <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
            Scan Options
          </h3>
          <div className="space-y-1">
            <label className="w-full flex-between gap-2 cursor-pointer select-none p-2 rounded-md hover:bg-blue-500/10 transition-all duration-200">
              <span>Rescan</span>
              <input
                type="checkbox"
                name="rescan"
                checked={true} //formData.rescan}
                // onChange={handleInputChange}
                className="appearance-none w-5 h-5 border-2 border-blue-400/50 rounded-md bg-transparent 
                           checked:bg-blue-500 checked:border-blue-500 
                           flex items-center justify-center
                           transition-all duration-200
                           focus:outline-none focus:ring-2 focus:ring-blue-500/30
                           after:content-['✓'] after:hidden checked:after:block
                           after:text-white after:text-sm after:font-bold"
              />
            </label>



            <label className="w-full flex-between gap-2 cursor-pointer select-none p-2 rounded-md hover:bg-blue-500/10 transition-all duration-200">
              <span>Community Comments</span>
              <input
                type="checkbox"
                name="community-comments"
                // checked={formData.communityComments}
                // onChange={handleInputChange}
                className="appearance-none w-5 h-5 border-2 border-blue-400/50 rounded-md bg-transparent 
                           checked:bg-blue-500 checked:border-blue-500 
                           flex items-center justify-center
                           transition-all duration-200
                           focus:outline-none focus:ring-2 focus:ring-blue-500/30
                           after:content-['✓'] after:hidden checked:after:block
                           after:text-white after:text-sm after:font-bold"
              />
            </label>
          </div>
        </div> */}
      </div>
    </>
  );
};

// const scanResults = [
//   {
//     engine: "Trojan.Win32.Generic",
//     result: "Malware detected",
//     category: "High",
//   },
//   {
//     engine: "Adware.MacOS.Generic",
//     result: "Suspicious behavior",
//     category: "Medium",
//   },
//   { engine: "PUP.Win32.Generic", result: "Clean", category: "Low" },
//   { engine: "Engine 4", result: "Potential threat", category: "Medium" },
// ];

const MiddleSection = ({ scanResult, setScanResult }) => {
  const [refresh, setRefresh] = useState(false);
  const [polling, setPolling] = useState(false);

  useEffect(() => {
    let intervalId;

    if (scanResult?.attributes?.status === "queued") {
      setPolling(true);
      intervalId = setInterval(async () => {
        try {
          const result = await getAnalyse(scanResult.id);
          if (result) {
            setScanResult(result);
            if (result.attributes.status !== "queued") {
              setPolling(false);
              clearInterval(intervalId);
            }
          }
        } catch (error) {
          console.error("Polling error:", error);
          setPolling(false);
          clearInterval(intervalId);
        }
      }, 5000);
    }

    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [scanResult?.id, scanResult?.attributes?.status, setScanResult]);

  const refetchAnalyse = () => {
    if (!scanResult?.id) {
      toast.error("No scan ID available");
      return;
    }

    const refreshScanAnalysis = async (id) => {
      setRefresh(true);
      try {
        const result = await getAnalyse(id);
        // console.log(result);
        if (!result) {
          throw new Error("Something went wrong, please try again!");
        }

        setScanResult(result);
        return "Your Scan analysis is ready!";
      } catch (error) {
        throw error;
      } finally {
        setRefresh(false);
      }
    };

    toast.promise(refreshScanAnalysis(scanResult?.id), {
      loading: "Refetching Scan Analysis...",
      success: "Your Scan analysis is refreshed!",
      error: (err) => `${err.message}`,
    });
  };

  const renderScanStatus = () => {
    if (!scanResult?.attributes) {
      return (
        <p className="text-center py-4 text-gray-500">
          No scan results available. Submit a URL or upload a file to start
          scanning.
        </p>
      );
    }

    const { status, stats, results, date } = scanResult.attributes;
    const fileInfo = scanResult?.meta?.file_info;
    const urlInfo = scanResult?.meta?.url_info;

    return (
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Status: <span className="font-semibold capitalize">{status}</span>
            </p>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Scan Date:{" "}
              {new Date(date * 1000).toLocaleString("en-US", {
                day: "numeric",
                month: "short",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                hour12: true,
              })}
            </p>
            {fileInfo ?
              <>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  SHA256:{" "}
                  <span className="font-mono text-xs">{fileInfo.sha256}</span>
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  File Size: {(fileInfo.size / (1024 * 1024)).toFixed(2)} MB
                </p>
              </>
            : urlInfo && (
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  URL:{" "}
                  <span className="font-mono text-xs break-all">
                    {urlInfo.url}
                  </span>
                </p>
              )
            }
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm">Malicious:</span>
              <ReactCountUp
                amt={stats.malicious}
                duration={1.5}
                className="text-sm font-semibold text-red-600"
              />
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm">Suspicious:</span>

              <ReactCountUp
                amt={stats.suspicious}
                duration={1.5}
                className="text-sm font-semibold text-yellow-600"
              />
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm">
                {stats.harmless !== undefined ? "Harmless" : "Clean"}:
              </span>
              <ReactCountUp
                amt={stats.harmless || stats.undetected}
                duration={1.5}
                className="text-sm font-semibold text-green-600"
              />
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm">
                {stats.harmless !== undefined ? "Undetected" : "Unsupported"}:
              </span>
              <ReactCountUp
                amt={
                  stats.harmless !== undefined ?
                    stats.undetected
                  : stats["type-unsupported"]
                }
                duration={1.5}
                className="text-sm font-semibold text-gray-600"
              />
            </div>
          </div>
        </div>

        {Object.keys(results).length > 0 ?
          <div className="max-h-[400px] overflow-y-auto">
            <table className="w-full">
              <thead className="sticky top-0 bg-background/80 backdrop-blur-md z-10">
                <tr>
                  <th className="text-left p-3 font-semibold">Engine</th>
                  <th className="text-left p-3 font-semibold">
                    {Object.values(results)[0]?.engine_version !== undefined ?
                      "Version"
                    : "Method"}
                  </th>
                  <th className="text-left p-3 font-semibold">Category</th>
                  <th className="text-left p-3 font-semibold">Result</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(results).map(([engine, data]) => (
                  <tr
                    key={engine}
                    className="hover:bg-primary/5 transition-colors"
                  >
                    <td className="p-3">{data?.engine_name}</td>
                    <td className="p-3 text-sm text-gray-600">
                      {data.engine_version || data.method || "N/A"}
                    </td>
                    <td className="p-3">
                      <span
                        className={`capitalize font-semibold px-2 py-1 rounded-full text-xs ${
                          data.category === "malicious" ?
                            "bg-red-100 text-red-800"
                          : data.category === "suspicious" ?
                            "bg-yellow-100 text-yellow-800"
                          : (
                            data.category === "harmless" ||
                            data.category === "undetected"
                          ) ?
                            "bg-green-100 text-green-800"
                          : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        {data.category}
                      </span>
                    </td>
                    <td className="capitalize p-3">{data.result || "Clean"}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        : <div className="text-center py-4">
            <p className="text-gray-500">
              Analysis in progress. Click refresh to check for results.
            </p>
            {status === "queued" && (
              <div className="mt-2">
                <RiLoaderLine className="animate-spin inline-block mr-2" />
                Waiting in queue...
              </div>
            )}
          </div>
        }
      </div>
    );
  };

  return (
    <div className="w-full h-fit animate-slide-down bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:space-y-6 lg:space-y-8 rounded-lg overflow-hidden">
      <div className="flex-between gap-4">
        <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
          Detection Results
        </h3>
        {scanResult && scanResult.attributes.status !== "queued" && (
          <Button
            onClick={refetchAnalyse}
            type="button"
            variant="secondary"
            size="sm"
            effect="gooeyLeft"
            disabled={refresh || polling}
            className={refresh ? "animate-pulse" : ""}
          >
            {(refresh || polling) && (
              <RiLoaderLine className="animate-spin mr-2" />
            )}
            Refresh
          </Button>
        )}
      </div>
      <div className="w-full overflow-x-auto">{renderScanStatus()}</div>
    </div>
  );
};

const BottomSection = () => {
  const [schedules, setSchedules] = useState({
    dailyQuick: {
      time: "10:00",
      enabled: true,
      lastRun: null,
      nextRun: null,
    },
    weeklyFull: {
      day: "Sunday",
      time: "02:00",
      enabled: true,
      lastRun: null,
      nextRun: null,
    },
  });
  const [editingSchedule, setEditingSchedule] = useState(null);

  const handleScheduleUpdate = (type, newSchedule) => {
    const updatedSchedule = {
      ...schedules[type],
      ...newSchedule,
    };

    setSchedules((prev) => ({
      ...prev,
      [type]: updatedSchedule,
    }));

    if (updatedSchedule.enabled) {
      const nextRun = scheduleTask(type, updatedSchedule, true, (scanType) => {
        console.log(`Running ${scanType} scan`);
        // Implement your scan logic here
        setSchedules((prev) => ({
          ...prev,
          [scanType]: {
            ...prev[scanType],
            lastRun: new Date().toISOString(),
          },
        }));
      });

      // Update next run time in state
      if (nextRun) {
        setSchedules((prev) => ({
          ...prev,
          [type]: {
            ...prev[type],
            nextRun: nextRun.toISOString(),
          },
        }));
      }
    }

    setEditingSchedule(null);
  };

  // Clean up schedules when component unmounts
  useEffect(() => {
    return () => {
      cancelAllSchedules();
    };
  }, []);

  // Initial schedule setup
  useEffect(() => {
    Object.entries(schedules).forEach(([type, schedule]) => {
      if (schedule.enabled) {
        const nextRun = scheduleTask(type, schedule, true, (scanType) => {
          console.log(`Running ${scanType} scan`);
          setSchedules((prev) => ({
            ...prev,
            [scanType]: {
              ...prev[scanType],
              lastRun: new Date().toISOString(),
            },
          }));
        });

        if (nextRun) {
          setSchedules((prev) => ({
            ...prev,
            [type]: {
              ...prev[type],
              nextRun: nextRun.toISOString(),
            },
          }));
        }
      }
    });
  }, []);

  const formatNextRun = (type, schedule) => {
    const [hours, minutes] = schedule.time.split(":");
    const next = new Date();
    next.setHours(parseInt(hours, 10));
    next.setMinutes(parseInt(minutes, 10));
    next.setSeconds(0);

    if (type === "weeklyFull") {
      const dayMap = {
        Sunday: 0,
        Monday: 1,
        Tuesday: 2,
        Wednesday: 3,
        Thursday: 4,
        Friday: 5,
        Saturday: 6,
      };
      const targetDay = dayMap[schedule.day];
      const currentDay = next.getDay();
      const daysUntilTarget = (targetDay + 7 - currentDay) % 7;
      next.setDate(next.getDate() + daysUntilTarget);
    } else if (next < new Date()) {
      next.setDate(next.getDate() + 1);
    }

    return next.toLocaleString();
  };

  return (
    <>
      <div className="w-full h-fit animate-slide-up bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:sapce-y-6 lg:space-y-8 rounded-lg overflow-hidden">
        <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
          Scheduled Scans
        </h3>
        <div className="space-y-1 sm:space-y-2 md:sapce-y-3 lg:space-y-4">
          {Object.entries(schedules).map(([type, schedule]) => (
            <Dialog
              key={type}
              open={editingSchedule === type}
              onOpenChange={(open) => !open && setEditingSchedule(null)}
            >
              <DialogTrigger asChild>
                <div className="w-full flex-between gap-2 cursor-pointer select-none p-2 rounded-md hover:bg-blue-500/10 transition-all duration-200">
                  <div>
                    <h4 className="font-semibold">
                      {type === "dailyQuick" ?
                        "Daily Quick Scan"
                      : "Weekly Full Scan"}
                    </h4>
                    <p className="text-xs md:text-sm text-gray-700 dark:text-zinc-400">
                      {type === "dailyQuick" ?
                        `Everyday at ${schedule.time}`
                      : `Every ${schedule.day} at ${schedule.time}`}
                    </p>
                    {schedule.enabled && (
                      <p className="text-xs text-blue-500">
                        Next run: {formatNextRun(type, schedule)}
                      </p>
                    )}
                    {schedule.lastRun && (
                      <p className="text-xs text-gray-500">
                        Last run: {new Date(schedule.lastRun).toLocaleString()}
                      </p>
                    )}
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => setEditingSchedule(type)}
                  >
                    <FaEdit
                      size={25}
                      className="text-blue-400 group-hover:text-blue-500"
                    />
                  </Button>
                </div>
              </DialogTrigger>
              <DialogContent className="border-none shadow-md">
                <DialogHeader>
                  <DialogTitle>
                    Edit {type === "dailyQuick" ? "Daily Quick" : "Weekly Full"}{" "}
                    Scan Schedule
                  </DialogTitle>
                </DialogHeader>
                <form
                  onSubmit={(e) => {
                    e.preventDefault();
                    handleScheduleUpdate(type, {
                      time: schedule.time,
                      enabled: schedule.enabled,
                      ...(type === "weeklyFull" && { day: schedule.day }),
                    });
                  }}
                  className="space-y-4 py-4"
                >
                  {type === "weeklyFull" && (
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Day of Week</label>
                      <select
                        value={schedule.day}
                        onChange={(e) =>
                          handleScheduleUpdate(type, { day: e.target.value })
                        }
                        className="input-style"
                      >
                        {[
                          "Sunday",
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday",
                          "Saturday",
                        ].map((day) => (
                          <option key={day} value={day}>
                            {day}
                          </option>
                        ))}
                      </select>
                    </div>
                  )}
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Time</label>
                    <input
                      type="time"
                      value={schedule.time}
                      onChange={(e) =>
                        handleScheduleUpdate(type, { time: e.target.value })
                      }
                      className="input-style"
                    />
                  </div>
                  <label className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={schedule.enabled}
                      onChange={(e) =>
                        handleScheduleUpdate(type, {
                          enabled: e.target.checked,
                        })
                      }
                      className="checkbox"
                    />
                    <span>Enable scan</span>
                  </label>
                  <div className="flex justify-end gap-2 pt-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => setEditingSchedule(null)}
                    >
                      Cancel
                    </Button>
                    <Button type="submit" variant="default">
                      Save Changes
                    </Button>
                  </div>
                </form>
              </DialogContent>
            </Dialog>
          ))}
        </div>
      </div>
    </>
  );
};
