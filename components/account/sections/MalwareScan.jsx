"use client";

import { useState } from "react";
import { toast } from "sonner";
import { getAnalyse, scanAnalyse } from "@/utils/virusTotal.action";
import { Button } from "@/components/ui/button";
import { Upload, X } from "lucide-react";
import { IoSearch } from "react-icons/io5";
import { FaEdit } from "react-icons/fa";

const MalwareScan = () => {
  const [file, setFile] = useState(null);
  const [scanResult, setScanResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleButtonClick = async () => {
    try {
      const [fileHandle] = await window.showOpenFilePicker({
        multiple: false,
      });
      const selectedFile = await fileHandle.getFile();
      setFile(selectedFile);

      setIsLoading(true);
      const fileForm = new FormData();
      fileForm.append("file", selectedFile);

      const startScanning = async (file) => {
        try {
          const result = await scanAnalyse(file);
          console.log(result);

          if (!result) {
            throw new Error("Something went wrong, please try again!");
          }
          setScanResult(result);
          return "Your Scan analysis is ready!";
        } catch (error) {
          throw error;
        } finally {
          setIsLoading(false);
        }
      };

      toast.promise(startScanning(fileForm), {
        loading: "Scanning...",
        success: "Your Scan analysis is ready!",
        error: (err) => `${err.message}`,
      });
    } catch (err) {
      if (err.name !== "AbortError") {
        toast.error("Failed to select file");
      }
    }
  };

  const handleRemoveFile = () => {
    setFile(null);
    setScanResult(null);
  };

  return (
    <>
      <section className="w-full h-full space-y-4 md:space-y-6 lg:space-y-8 overflow-hidden">
        <TopSection>
          <div className="w-full h-fit space-y-2 md:sapce-y-4 lg:space-y-6 relative overflow-hidde">
            {file && (
              <div className="w-full animate-slide-down p-2 bg-blue-500/10 rounded-md flex-between">
                <p className="text-sm text-blue-600 dark:text-blue-400 truncate">
                  Selected file: {file.name}
                </p>
                <button
                  onClick={handleRemoveFile}
                  className="p-1 hover:bg-red-500/10 rounded-full text-red-500 transition-colors"
                >
                  <X size={18} />
                </button>
              </div>
            )}

            <Button
              size="lg"
              effect="shine"
              className="w-full"
              onClick={handleButtonClick}
              disabled={isLoading}
            >
              <Upload className="w-8 h-8" />
              <span className="text-sm">
                {isLoading ? "Uploading file..." : "Upload File"}
              </span>
            </Button>

            <form className="w-full h-fit space-y-1 md:sapce-y-2 lg:space-y-4">
              <input
                type="text"
                name="string"
                id="string"
                required
                // value={name}
                // onChange={handleNameChange}
                placeholder="Enter URL, Domain, IP or Hash"
                className="input-style"
              />
              <Button size="lg" effect="gooeyLeft" className="w-full">
                <IoSearch size={28} />
                <span className="text-sm">
                  {false ? "Analysing..." : "Search"}
                </span>
              </Button>
            </form>
          </div>
        </TopSection>
        <MiddleSection scanResult={scanResult} setScanResult={setScanResult} />
        <BottomSection />
      </section>
    </>
  );
};

export default MalwareScan;

const TopSection = ({ children }) => {
  return (
    <>
      <div className="w-full h-fit grid md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-6 xl:gap-8">
        <div className="w-full h-full bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:sapce-y-6 lg:space-y-8 rounded-lg overflow-hidden">
          <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
            File Analysis
          </h3>

          {children}
        </div>
        <div className="w-full h-full bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:sapce-y-6 lg:space-y-8  rounded-lg overflow-hidden">
          <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
            Detection Statistics
          </h3>
          <div className="space-y-1 sm:sapce-y-2 md:space-y-3 lg:space-y-4">
            <div className="w-full flex-between gap-2">
              <span>Total Scans:</span>
              <span className="text-blue-600 dark:text-blue-500">1234</span>
            </div>
            <div className="w-full flex-between gap-2">
              <span>Detection Rate:</span>
              <span className="text-red-600 dark:text-red-500">3</span>
            </div>
            <div className="w-full flex-between gap-2">
              <span>Analysis Date:</span>
              <span>5m 22s</span>
            </div>
          </div>
        </div>
        <div className="w-full h-full bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-2 md:sapce-y-4 lg:space-y-6 rounded-lg overflow-hidden">
          <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
            Scan Options
          </h3>
          <div className="space-y-1">
            <label className="w-full flex-between gap-2 cursor-pointer select-none p-2 rounded-md hover:bg-blue-500/10 transition-all duration-200">
              <span>Rescan</span>
              <input
                type="checkbox"
                name="rescan"
                checked={true} //formData.rescan}
                // onChange={handleInputChange}
                className="appearance-none w-5 h-5 border-2 border-blue-400/50 rounded-md bg-transparent 
                           checked:bg-blue-500 checked:border-blue-500 
                           flex items-center justify-center
                           transition-all duration-200
                           focus:outline-none focus:ring-2 focus:ring-blue-500/30
                           after:content-['✓'] after:hidden checked:after:block
                           after:text-white after:text-sm after:font-bold"
              />
            </label>

            {/* <span className="text-blue-600 dark:text-blue-500">1234</span> */}

            <label className="w-full flex-between gap-2 cursor-pointer select-none p-2 rounded-md hover:bg-blue-500/10 transition-all duration-200">
              <span>Community Comments</span>
              <input
                type="checkbox"
                name="community-comments"
                // checked={formData.communityComments}
                // onChange={handleInputChange}
                className="appearance-none w-5 h-5 border-2 border-blue-400/50 rounded-md bg-transparent 
                           checked:bg-blue-500 checked:border-blue-500 
                           flex items-center justify-center
                           transition-all duration-200
                           focus:outline-none focus:ring-2 focus:ring-blue-500/30
                           after:content-['✓'] after:hidden checked:after:block
                           after:text-white after:text-sm after:font-bold"
              />
            </label>
          </div>
        </div>
      </div>
    </>
  );
};

const scanResults = [
  {
    engine: "Trojan.Win32.Generic",
    result: "Malware detected",
    category: "High",
  },
  {
    engine: "Adware.MacOS.Generic",
    result: "Suspicious behavior",
    category: "Medium",
  },
  { engine: "PUP.Win32.Generic", result: "Clean", category: "Low" },
  { engine: "Engine 4", result: "Potential threat", category: "Medium" },
];

const MiddleSection = ({ scanResult, setScanResult }) => {
  const [refresh, setRefresh] = useState(false);
  const id = scanResult.id;
  const formatDate = (timestamp) => {
    const date = new Date(timestamp * 1000); // converting Unix timestamp to milliseconds
    return date.toLocaleString();
  };

  const refetchAnalyse = () => {
    setRefresh(true);
    const refreshScanAnalysis = async (id) => {
      try {
        const result = await getAnalyse(id);
        // console.log(result);
        if (!result) {
          throw new Error("Something went wrong, please try again!");
        }

        setScanResult(result);
        return "Your Scan analysis is ready!";
      } catch (error) {
        throw error;
      } finally {
        setRefresh(false);
      }
    };

    toast.promise(refreshScanAnalysis(id), {
      loading: "Refetching Scan Analysis...",
      success: "Your Scan analysis is refreshed!",
      error: (err) => `${err.message}`,
    });
  };

  const getCategoryColor = (category) => {
    switch (category.toLowerCase()) {
      case "high":
        return "text-red-600";
      case "medium":
        return "text-yellow-600";
      case "low":
        return "text-green-600";
      default:
        return "";
    }
  };

  return (
    <>
      <div className="w-full h-fit bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:sapce-y-6 lg:space-y-8 rounded-lg overflow-hidden">
        <div className="flex-between gap-4">
          <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
            Detection Results
          </h3>
          <Button
            onClick={refetchAnalyse}
            type="button"
            variant="secondary"
            className={refresh && "animate-pulse active:translate-y-0"}
          >
            {refresh && <RiLoaderLine className="animate-spin mr-1" />}
            Refresh
          </Button>
        </div>
        <div className="w-full overflow-x-auto">
          <table className="w-full">
            <thead className="border-b border-b-primary/20">
              <tr>
                <th className="text-left p-3 font-semibold">Engine</th>
                <th className="text-left p-3 font-semibold">Result</th>
                <th className="text-left p-3 font-semibold">Category</th>
              </tr>
            </thead>
            <tbody>
              {scanResults.map((result, index) => (
                <tr
                  key={index}
                  className="hover:bg-primary/10 transition-colors duration-200"
                >
                  <td className="p-3">{result.engine}</td>
                  <td className="p-3">{result.result}</td>
                  <td className="p-3">
                    <span
                      className={`font-medium ${getCategoryColor(result.category)}`}
                    >
                      {result.category}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
};
const BottomSection = () => {
  return (
    <>
      <div className="w-full h-fit bg-background/80 backdrop-blur-sm p-2 md:p-4 lg:p-6 space-y-4 md:sapce-y-6 lg:space-y-8 rounded-lg overflow-hidden">
        <h3 className="font-bold text-md md:text-lg lg:text-xl xl:text-2xl">
          Scheduled Scans
        </h3>
        <div className="space-y-1 sm:space-y-2 md:sapce-y-3 lg:space-y-4">
          <div className="w-full flex-between gap-2 cursor-pointer select-none p-2 rounded-md hover:bg-blue-500/10 transition-all duration-200">
            <div className="">
              <h4 className="font-semibold">Daily Quick Scan</h4>
              <p className="text-xs md:text-sm text-gray-700 dark:text-zinc-400">
                Everyday at 10:00 AM
              </p>
            </div>
            <FaEdit
              size={25}
              className="text-blue-400 group-hover:text-blue-500"
            />
          </div>
          <div className="w-full flex-between gap-2 cursor-pointer select-none p-2 rounded-md hover:bg-blue-500/10 transition-all duration-200">
            <div className="">
              <h4 className="font-semibold">Weekly Full Scan</h4>
              <p className="text-xs md:text-sm text-gray-700 dark:text-zinc-400">
                Every Sunday at 02:00 AM
              </p>
            </div>
            <FaEdit
              size={25}
              className="text-blue-400 group-hover:text-blue-500"
            />
          </div>
        </div>
      </div>
    </>
  );
};
